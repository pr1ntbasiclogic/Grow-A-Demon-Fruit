--updatev1
local DataStoreService = game:GetService("DataStoreService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players          = game:GetService("Players")
local DefaultData      = require(script.Parent.DefaultData)
local HttpService = game:GetService("HttpService")
local SeedConfig = 	require(game:GetService("ReplicatedStorage"):WaitForChild("CONFIG"):WaitForChild("SeedConfig"))
local QuestConfig = require(game:GetService("ReplicatedStorage"):WaitForChild("CONFIG"):WaitForChild("QuestConfig"))
local Gamepasses = require(game:GetService("ReplicatedStorage"):WaitForChild("CONFIG"):WaitForChild("Products"):WaitForChild("GamePasses"))
local PlayerDataStore = DataStoreService:GetDataStore("FinalData_216")
local OrderedDataStore_Relly = DataStoreService:GetOrderedDataStore("Leaderboard_Relly")
local OrderedDataStore_TimePlayed = DataStoreService:GetOrderedDataStore("Leaderboard_TimePlayed")
local sessionData     = {}

local DataManager = {}

function DataManager.PlayerHasGamepass(player, gamepassId)
	local success, owns = pcall(function()
		return MarketplaceService:UserOwnsGamePassAsync(player.UserId, gamepassId)
	end)
	return success and owns
end

local function mergeDefaults(t, defaults)
	for k, v in pairs(defaults) do
		if type(v) == "table" then
			if type(t[k]) ~= "table" then
				t[k] = {}
			end
			mergeDefaults(t[k], v)
		elseif t[k] == nil then
			t[k] = v
		end
	end
end

local function enforceLimits(player, data)
	local hasExtraInventory = DataManager.PlayerHasGamepass(player, Gamepasses.ExtraInventory)
	local hasExtraCrop = DataManager.PlayerHasGamepass(player, Gamepasses.ExtraCropSpace)
	local hasInfiniteCrop = DataManager.PlayerHasGamepass(player, Gamepasses.InfiniteCropSpace)

	local inventoryLimit = 50
	if hasExtraInventory then
		inventoryLimit += 100 
	end

	local cropLimit
	if hasInfiniteCrop then
		cropLimit = math.huge 
	else
		cropLimit = 120
		if hasExtraCrop then
			cropLimit += 100 
		end
	end

	if #data.Inventory > inventoryLimit then
		for i = #data.Inventory, inventoryLimit + 1, -1 do
			table.remove(data.Inventory, i)
		end
	end

	if #data.Crops > cropLimit then
		for i = #data.Crops, cropLimit + 1, -1 do
			table.remove(data.Crops, i)
		end
	end
end

local GROWTH_CYCLE_SECONDS = 60
local function simulateOfflineGrowth(data)
	local now = os.time()
	local dt = now - (data.LastOnline or now)
	local cycles = math.floor(dt / GROWTH_CYCLE_SECONDS)
	if cycles > 0 then
		for _, crop in ipairs(data.Crops) do
			crop.currentGrowthCycle = math.min(crop.currentGrowthCycle + cycles, SeedConfig.MaxGrowthStage)
		end
	end
	data.LastOnline = now
end

local function syncStat(player, statPath, newValue)
	local folders = { "leaderstats", "Stats" }
	for _, folderName in ipairs(folders) do
		local folder = player:FindFirstChild(folderName)
		if not folder then continue end

		local ref = folder
		local parts = string.split(statPath, ".")

		for i = 1, #parts - 1 do
			ref = ref:FindFirstChild(parts[i])
			if not ref then break end
		end

		if ref then
			local valueObj = ref:FindFirstChild(parts[#parts])
			if valueObj then
				valueObj.Value = newValue
			end
		end
	end
end

function DataManager.SetStat(player, statPath, value)
	local data = sessionData[player.UserId]
	if not data then
		error("No data loaded for " .. player.Name)
	end

	local parts = string.split(statPath, ".")
	local ref = data

	for i = 1, #parts - 1 do
		ref = ref[parts[i]]
		if type(ref) ~= "table" then
			error(`Invalid path: {statPath}`)
		end
	end

	local key = parts[#parts]
	ref[key] = value
	syncStat(player, statPath, value)
end

--NOT FOR BOOLEANS OR STRINGS USE SetStat.
function DataManager.ManageStat(player, statPath, action, amount)
	local data = sessionData[player.UserId]
	if not data then
		error("No data loaded for " .. player.Name)
	end

	local parts = string.split(statPath, ".")
	local ref = data

	for i = 1, #parts - 1 do
		ref = ref[parts[i]]
		if type(ref) ~= "table" then
			error(`Invalid path: {statPath}`)
		end
	end

	local key = parts[#parts]
	local current = ref[key]
	if type(current) ~= "number" then
		error(`Stat "{statPath}" is not a number.`)
	end

	local newValue = current
	if action == "add" then
		newValue = current + (amount or 0)
	elseif action == "remove" then
		newValue = current - (amount or 0)
	elseif action == "set" then
		newValue = amount or 0
	elseif action == "reset" then
		newValue = 0
	else
		error("Unsupported action: " .. tostring(action))
	end

	ref[key] = math.max(0, newValue)
	syncStat(player, statPath, ref[key])
	return ref[key]
end

function DataManager.GetStat(player, statName)
	local data = sessionData[player.UserId]
	if not data then
		error(("No data loaded for player %s"):format(player.Name))
	end
	local val = data[statName]
	if type(val) ~= "number" then
		error(("Stat %q is not a number or doesn't exist for %s"):format(statName, player.Name))
	end
	return val
end

function DataManager.SetupLeaderstats(player)
	local data = sessionData[player.UserId]
	if not data then return end

	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = player

	for _, statName in ipairs({ "Relly", "Kills" }) do
		local iv = Instance.new("IntValue")
		iv.Name = statName
		iv.Value = data[statName] or 0
		iv.Parent = leaderstats
	end

	local statsFolder = Instance.new("Folder")
	statsFolder.Name = "Stats"
	statsFolder.Parent = player

	local function insertValue(name, value, parent)
		local valType = typeof(value)
		local valObj
		if valType == "number" then
			valObj = Instance.new("NumberValue")
		elseif valType == "boolean" then
			valObj = Instance.new("BoolValue")
		elseif valType == "string" then
			valObj = Instance.new("StringValue")
		end

		if valObj then
			valObj.Name = name
			valObj.Value = value
			valObj.Parent = parent
		end
	end

	local function recurse(folder, tbl)
		for key, val in pairs(tbl) do
			if key == "Relly" or key == "Kills" then
				continue
			end

			if typeof(val) == "table" and key ~= "Inventory" and key ~= "Crops" then
				local subFolder = Instance.new("Folder")
				subFolder.Name = key
				subFolder.Parent = folder
				recurse(subFolder, val)
			else
				insertValue(key, val, folder)
			end
		end
	end

	recurse(statsFolder, data)
end

local function resetDailyQuests(data)
	local now = os.time()
	local lastReset = data.Quests.LastReset or 0
	local lastDate = os.date("!*t", lastReset)
	local currentDate = os.date("!*t", now)

	if lastDate.year ~= currentDate.year or lastDate.yday ~= currentDate.yday then
		data.Quests.LastReset = now
		data.Quests.Active = {}
		data.Quests.BonusClaimed = false
		
		local pool = QuestConfig.Pool
		local poolCopy = table.clone(pool)
		local numQuests = math.min(QuestConfig.NumQuestsPerDay or 3, #poolCopy)

		for i = 1, numQuests do
			local index = math.random(1, #poolCopy)
			local questDef = table.remove(poolCopy, index)

			local rewardOptions = questDef.RewardOptions
			local chosenReward = rewardOptions[math.random(1, #rewardOptions)]

			local goalScale = 1 
			local goalMin, goalMax = table.unpack(questDef.GoalRange)
			goalMin = math.ceil(goalMin * goalScale)
			goalMax = math.ceil(goalMax * goalScale)

			local randomizedGoal = math.random(goalMin, goalMax)

			local reward
			if chosenReward.Type == "Relly" then
				local perUnit = chosenReward.PerUnit or 10
				reward = {
					Type = "Relly",
					Amount = randomizedGoal * perUnit
				}
			elseif chosenReward.Type == "Item" then
				local items = chosenReward.PossibleItems or {}
				local item = items[math.random(1, #items)]
				reward = {
					Type = "Item",
					ItemName = item
				}
			end

			local quest = {
				Id = questDef.Id,
				Description = string.format("%s (%d)", questDef.Description, randomizedGoal),
				Goal = randomizedGoal,
				Progress = 0,
				Reward = reward,
				IsClaimed = false
			}

			table.insert(data.Quests.Active, quest)
		end
	end
end

function DataManager.UpdateQuestProgress(player, questId, amount)
	local data = sessionData[player.UserId]
	if not data then return end

	for _, quest in ipairs(data.Quests.Active) do
		if quest.Id == questId and quest.Progress < quest.Goal then
			quest.Progress = math.min(quest.Progress + amount, quest.Goal)
			break
		end
	end
end

local function canClaimDailyReward(data)
	local now = os.time()
	local lastClaim = data.DailyReward.LastClaimed or 0
	local lastDate = os.date("!*t", lastClaim)
	local currentDate = os.date("!*t", now)

	return lastDate.day ~= currentDate.day or lastDate.month ~= currentDate.month or lastDate.year ~= currentDate.year
end

function DataManager.Load(player)
	local key = tostring(player.UserId)
	local MAX_RETRIES = 3
	local RETRY_DELAY = 1

	local saved
	local success = false

	for attempt = 1, MAX_RETRIES do
		success, saved = pcall(function()
			return PlayerDataStore:GetAsync(key)
		end)

		if success then break end

		warn(string.format("[Load Attempt %d] Failed to load data for %s, retrying...", attempt, player.Name))
		task.wait(RETRY_DELAY * attempt)
	end

	local data = success and saved or DefaultData.Get()
	mergeDefaults(data, DefaultData.Get())
	simulateOfflineGrowth(data)
	enforceLimits(player, data)

	if data.Tutorial and not data.Tutorial.Completed then
		data.Tutorial.Step = 0
	end
	data.JoinedAt = data.JoinedAt or os.time()
	data.TimePlayed = data.TimePlayed or 0
	sessionData[player.UserId] = data
	DataManager.SetupLeaderstats(player)
	resetDailyQuests(data)
	return data
end


function DataManager.UpdatePlayerTimePlayed(player)
	local data = sessionData[player.UserId]
	if data then
		local timeSpentThisSession = os.time() - data.JoinedAt 
		data.TimePlayed = data.TimePlayed + timeSpentThisSession 
	end
end


function DataManager.RestoreInventory(player)
	local data = sessionData[player.UserId]
	if not data then return end

	for _, item in ipairs(data.Inventory) do
		local sourceFolder
		if item.Type == "Fruit" then
			sourceFolder = game.ServerStorage:FindFirstChild("FRUITS")
		elseif item.Type == "Seed" then
			sourceFolder = game.ServerStorage:FindFirstChild("SEEDS")
		elseif item.Type == "Tool" then
			sourceFolder = game.ServerStorage:FindFirstChild("TOOLS")
		else
			warn("Unknown item type:", item.Type)
		end

		if sourceFolder then
			local tool
			if item.Type == "Fruit" then
				local cleanName = string.format("%s Fruit", item.Base)
				tool = sourceFolder:FindFirstChild(cleanName)
			elseif item.Type == "Seed" then
				local cleanName = string.format("%s Seed", item.Base or item.Name)
				tool = sourceFolder:FindFirstChild(cleanName)
			elseif item.Type == "Tool" then
				tool = sourceFolder:FindFirstChild(item.Name)
			end

			if tool then
				local clone
				pcall(function() clone = tool:Clone() end)
				if clone then
					if item.Type == "Fruit" then
						local fullName = string.format("%s %s Fruit [KG: %.2f]",
							(item.Modifier and item.Modifier ~= "None") and item.Modifier or "",
							item.Base,
							item.KG
						)
						clone.Name = fullName

						if item.Modifier == "Rainbow" then
							local union = clone:FindFirstChildWhichIsA("UnionOperation")
							if union then
								union.UsePartColor = true
							end
							task.defer(function()
								local RunService = game:GetService("RunService")
								local startTime = tick()
								while clone and clone:IsDescendantOf(game) do
									local hue = ((tick() - startTime) % 5) / 5
									local color = Color3.fromHSV(hue, 1, 1)
									for _, part in ipairs(clone:GetDescendants()) do
										if part:IsA("BasePart") then
											part.Color = color
											part.Material = Enum.Material.Neon
										end
									end
									RunService.Heartbeat:Wait()
								end
							end)
						else
							local modData = SeedConfig.Modifiers[item.Modifier]
							if modData then
								for _, part in ipairs(clone:GetDescendants()) do
									if part:IsA("BasePart") then
										if modData.Color then part.Color = modData.Color end
										if modData.Material then part.Material = modData.Material end
									end
								end
							end
						end

						local scale = item.Scale or math.clamp(item.KG / 1.0, 0.5, 4.0)
						for _, part in ipairs(clone:GetDescendants()) do
							if part:IsA("BasePart") then
								part.Anchored = false
								part.CanCollide = false
								part.Massless = true

								local mesh = part:FindFirstChildWhichIsA("SpecialMesh")
								if mesh then
									mesh.Scale = Vector3.new(scale, scale, scale)
								else
									part.Size = part.Size * scale
								end
							end
						end
					end
					clone.Parent = player:FindFirstChild("Backpack")
				end
			end
		end
	end
end

function DataManager.Save(player)
	local data = sessionData[player.UserId]
	if not data then return end

	data.LastOnline = os.time()
	local key = tostring(player.UserId)
	for attempt = 1, 3 do
		local success, err = pcall(function()
			PlayerDataStore:SetAsync(key, data)
			print("Relly value before saving: ", data.Relly)
			OrderedDataStore_Relly:SetAsync(tostring(player.UserId), data.Relly or 0)
			OrderedDataStore_TimePlayed:SetAsync(tostring(player.UserId), data.TimePlayed or 0)
		end)
		if success then
			return true
		else
			warn(`Save failed for {player.Name} (attempt {attempt}): {err}`)
			task.wait(0.25 * attempt)
		end
	end
	warn(`Data for {player.Name} may not have been saved.`)
	return false
end

function DataManager.AddStat(player, statName, amount)
	return DataManager.ManageStat(player, statName, "add", amount)
end

function DataManager.Remove(player)
	sessionData[player.UserId] = nil
end

function DataManager.Get(player)
	return sessionData[player.UserId]
end

function DataManager.AddItem(player, itemData)
	local hasExtraInventory = DataManager.PlayerHasGamepass(player, Gamepasses.ExtraInventory)
	local hasExtraCrop = DataManager.PlayerHasGamepass(player, Gamepasses.ExtraCropSpace)
	local hasInfiniteCrop = DataManager.PlayerHasGamepass(player, Gamepasses.InfiniteCropSpace)
	
	local data = sessionData[player.UserId]
	if not data then
		warn("No data loaded for player: " .. player.Name)
		return false, "No data loaded."
	end

	if #data.Inventory >= 50 or #data.Inventory >= 150 and hasExtraInventory then
		warn("HOW IS INVENTORY FULL for player: " .. player.Name)
		return false, "Inventory is full."
	end

	if not itemData.Name then
		warn("GOTTA HAVE A NAME BRO for item: " .. tostring(itemData))
		return false, "Item must have a Name."
	end

	itemData.Type = itemData.Type or "Unknown"
	if not table.find({ "Fruit", "Seed", "Tool" }, itemData.Type) then
		warn("INVALID ITEM TYPE for item: " .. tostring(itemData.Name) .. ", Type: " .. tostring(itemData.Type))
		return false, "Invalid item type: " .. tostring(itemData.Type)
	end

	itemData.Modifier = itemData.Modifier or "None"
	itemData.Size = itemData.Size or 1

	table.insert(data.Inventory, itemData)
	return true
end

function DataManager.RemoveItem(player, index)
	local data = sessionData[player.UserId]
	if not data then return false, "No data loaded." end

	if type(index) ~= "number" or index < 1 or index > #data.Inventory then
		return false, "Invalid inventory index."
	end

	table.remove(data.Inventory, index)
	return true
end

function DataManager.UpdateCrop(player, updatedCrop)
	local data = sessionData[player.UserId]
	if not data then return end

	for i, crop in ipairs(data.Crops) do
		if crop.UID == updatedCrop.UID then
			data.Crops[i] = updatedCrop
			break
		end
	end
end

function DataManager.PlantCrop(player, cropData)
	local data = sessionData[player.UserId]
	if #data.Crops >= 120 then
		return false, "All plots are full."
	end

	if typeof(cropData.LocalPosition) ~= "table" or
		type(cropData.LocalPosition.x) ~= "number" or
		type(cropData.LocalPosition.y) ~= "number" or
		type(cropData.LocalPosition.z) ~= "number" then
		return false, "Invalid LocalPosition"
	end

	local seedName = cropData.Name:gsub(" Seed", "")
	local seedConfig = SeedConfig.Seeds[seedName]
	if seedConfig then
		cropData.Size = cropData.Scale or 1
	else
		cropData.Size = 1
	end

	cropData.PlantedAt = os.time()
	table.insert(data.Crops, cropData)
	return true
end

function DataManager.HarvestCrop(player, index)
	local data = sessionData[player.UserId]
	local rec  = data.Crops[index]
	if rec then
		rec._removed = true
		table.remove(data.Crops, index)
	end
end

return DataManager
